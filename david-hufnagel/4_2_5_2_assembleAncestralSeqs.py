#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Takes a list of critical nodes in the form of a tabular file and an ancestral
state file generated by IQ-TREE, and generates a fasta file containing an
ancestral state for each critical node

Created by David E. Hufnagel on May  8, 2023
"""
import sys

stateFd = open(sys.argv[1])  #an ancestral state file generated by IQ-TREE
critFd = open(sys.argv[2])   #a list of critical nodes in the form of a tabular file
out = open(sys.argv[3], "w") #a fasta file containing anancestral state for each critical node





def SaveIntoDict(key, val, dictx):
    if key in dictx:
        dictx[key].append(val)
    else:
        dictx[key] = [val,]
        
        
        
        
        
#Go through the critical nodes file and save the nodeID associated with 
#  critical nodes in a list as well as a dict of key: nodeID  val: nodeName
critNodes = []
critNodeDict = {}
critFd.readline()
for line in critFd:
    lineLst = line.strip().split("\t")
    nodeName = lineLst[0]
    nodeID = "Node%s" % (lineLst[1])
    
    critNodes.append(nodeID)
    critNodeDict[nodeID] = nodeName


#Go through the ancestral state file generated by IQ-TREE, and save a dict of 
#  key: nodeID  val: [(siteNum,state),...]  for all critical nodes
ancStatesDict = {}
for line in stateFd:
    if not line.startswith("#") and \
        line != "Node\tSite\tState\tp_A\tp_C\tp_G\tp_T\n":
        lineLst = line.strip().split("\t")
        nodeID = lineLst[0]
        if nodeID in critNodes:
            siteNum = int(lineLst[1])
            state = lineLst[2]
            
            statePair = (siteNum, state)
            SaveIntoDict(nodeID, statePair, ancStatesDict)

   
#Go through the critical node dict, write the nodeName as the defline, and for 
#  each node sort the state list, go through site numbers from smallest to 
#  largest and write the states into the seq line 
for nodeID, statePairs in ancStatesDict.items():
    nodeName = critNodeDict[nodeID]
    newline = ">%s|%s\n" % (nodeName, nodeID)
    out.write(newline)

    statePairs.sort()
    for pair in statePairs:
        
        out.write(pair[1].replace("-","N"))
    out.write("\n")
















stateFd.close()
critFd.close()
out.close()